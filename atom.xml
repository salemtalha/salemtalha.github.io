<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bits of Discovery]]></title>
  <link href="http://salemtalha.github.io/atom.xml" rel="self"/>
  <link href="http://salemtalha.github.io/"/>
  <updated>2014-03-26T01:28:08-04:00</updated>
  <id>http://salemtalha.github.io/</id>
  <author>
    <name><![CDATA[Salem Talha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2048 Mod]]></title>
    <link href="http://salemtalha.github.io/blog/2014/03/26/2048-mod/"/>
    <updated>2014-03-26T01:15:23-04:00</updated>
    <id>http://salemtalha.github.io/blog/2014/03/26/2048-mod</id>
    <content type="html"><![CDATA[<p>So the 2048 craze has pretty well taken hold, so I decided to make a
little mod myself out of it. The idea is that every 10 seconds,
everyone playing accept everyone else&rsquo;s keystrokes for a brief moment.
I did this using Socket.io along with
Node.js to send movements across clients. The main bit of code on the
server involves adding and removing the event listener the
appropriate intervals:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cb</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">broadcast</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;keypress&#39;</span><span class="p">,</span> <span class="nx">direction</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s1">&#39;keypress&#39;</span><span class="p">,</span> <span class="nx">cb</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="s1">&#39;keypress&#39;</span><span class="p">,</span> <span class="nx">cb</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">10000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also added a display so you can know how many
other players are online! You can check it out <a href="http://www.csclub.uwaterloo.ca/~satalha/2048">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wildcard Programming Challenge]]></title>
    <link href="http://salemtalha.github.io/blog/2014/02/28/wildcard-programming-challenge/"/>
    <updated>2014-02-28T12:07:03-05:00</updated>
    <id>http://salemtalha.github.io/blog/2014/02/28/wildcard-programming-challenge</id>
    <content type="html"><![CDATA[<p>I came across a neat programming question at a tech company called <a href="http://www.trywildcard.com/challenge/problem1">WildCard</a> and decided and I&rsquo;d take a crack at it in C.
The idea here is pretty simple using some basic combinatorics. If you have fewer than 5 available spots in any given row/column, clearly you can&rsquo;t place 5 cards there.
However, if you have >= 5 open spots, you can do the following: place the cards in (EmptySpots choose 5) places, and once you&rsquo;ve placed them there, you can shuffle the
cards in those 5 places in 5! ways. So when you multiply these together you get the number of possibilities for a single row or column. All we have to do now is iterate
over the table and sum these values up! Here&rsquo;s the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TABLE_SIZE 50</span>
</span><span class='line'><span class="cp">#define NUM_CARDS 5</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">fact</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">*=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">nck</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sol</span> <span class="o">=</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">fact</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">*</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sol</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;problem1input.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cols</span><span class="p">[</span><span class="n">TABLE_SIZE</span><span class="p">];</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">cols</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">TABLE_SIZE</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num_empty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TABLE_SIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">TABLE_SIZE</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">fscanf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cols</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">num_empty</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">fscanf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">+=</span> <span class="n">nck</span><span class="p">(</span><span class="n">num_empty</span><span class="p">,</span> <span class="n">NUM_CARDS</span><span class="p">);</span>
</span><span class='line'>    <span class="n">num_empty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">TABLE_SIZE</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">+=</span> <span class="n">nck</span><span class="p">(</span><span class="n">cols</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">NUM_CARDS</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//120 is the number of ways I can arrange the 5 cards in 5 spots, ie 5!</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">answer</span> <span class="o">*</span> <span class="mi">120</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you&rsquo;re interested in the answer, there are a whopping 167,160 ways to do this! Crazy how numbers work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Levenshtein Distance]]></title>
    <link href="http://salemtalha.github.io/blog/2014/01/31/levenshtein-distance/"/>
    <updated>2014-01-31T22:21:01-05:00</updated>
    <id>http://salemtalha.github.io/blog/2014/01/31/levenshtein-distance</id>
    <content type="html"><![CDATA[<p>I was reading on wikipedia about a few string functions and one interesting
one that I came across is the <a href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein Distance</a>.
It&rsquo;s a really neat way of figuring out the &ldquo;edit distance&rdquo; between two strings,
and, like many problems, it&rsquo;s best stated recursively. So here&rsquo;s my
implementation in racket. It&rsquo;s always interesting to think about how some
problems almost beg to be solved via a particular paradigm, and I think this is one of them.
For comparison, the imperative solutions on the wiki page are quite long and a
bit unwieldy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">reallev</span> <span class="nv">str1</span> <span class="nv">str2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">cost</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">[(</span><span class="nf">empty?</span> <span class="nv">str1</span><span class="p">)</span> <span class="p">(</span><span class="nb">length </span><span class="nv">str2</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">[(</span><span class="nf">empty?</span> <span class="nv">str2</span><span class="p">)</span> <span class="p">(</span><span class="nb">length </span><span class="nv">str1</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">[</span><span class="nf">else</span>
</span><span class='line'>           <span class="p">(</span><span class="k">when </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">equal? </span><span class="p">(</span><span class="nf">first</span> <span class="nv">str1</span><span class="p">)</span> <span class="p">(</span><span class="nf">first</span> <span class="nv">str2</span><span class="p">)))</span> <span class="p">(</span><span class="k">set! </span><span class="nv">cost</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">min </span><span class="p">(</span><span class="nb">add1 </span><span class="p">(</span><span class="nf">reallev</span> <span class="p">(</span><span class="nf">rest</span> <span class="nv">str1</span><span class="p">)</span> <span class="nv">str2</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">add1 </span><span class="p">(</span><span class="nf">reallev</span> <span class="nv">str1</span> <span class="p">(</span><span class="nf">rest</span> <span class="nv">str2</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">reallev</span> <span class="p">(</span><span class="nf">rest</span> <span class="nv">str1</span><span class="p">)</span> <span class="p">(</span><span class="nf">rest</span> <span class="nv">str2</span><span class="p">))</span> <span class="nv">cost</span><span class="p">))]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">lev</span> <span class="nv">str1</span> <span class="nv">str2</span><span class="p">)</span> <span class="p">(</span><span class="nf">reallev</span> <span class="p">(</span><span class="nb">string-&gt;list </span><span class="nv">str1</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-&gt;list </span><span class="nv">str2</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some cool uses of this might be, for example, to suggest spelling corrections on devices. If
you misspell a word, chances are the one you want is a short number of edits away, which in this
algorithm is formalized as being either a insertion, deletion or replacement.</p>

<p>The gist of the algorithm is quite simple. You start off comparing the strings pairwise.
As seen in the recursive call at the end of a function, if the two characters being
compared do not match, you&rsquo;re trying to achieve the minimum of of the 3 strategies by attaching a
&ldquo;cost&rdquo; to each operation and allowing each scenario to be recursed upon. It&rsquo;s quite elegant, and to me
it turned out to be simpler than I assumed it to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sieve of Eratosthenes]]></title>
    <link href="http://salemtalha.github.io/blog/2014/01/31/sieve-of-eratosthenes/"/>
    <updated>2014-01-31T21:03:29-05:00</updated>
    <id>http://salemtalha.github.io/blog/2014/01/31/sieve-of-eratosthenes</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve been taking an interest in prime numbers recently and how to generate them, so I wrote a up a quick implementation of <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">The Sieve of Eratosthenes</a> in Python. Here it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">primes</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="n">candidates</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="n">candidates</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">i</span><span class="p">,</span> <span class="bp">False</span><span class="p">])</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">sieve</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sieve</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
</span><span class='line'>  <span class="n">done</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="ow">not</span> <span class="n">done</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">candidates</span><span class="p">[</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span><span class="p">::</span><span class="n">p</span><span class="p">][</span><span class="mi">1</span><span class="p">:]:</span>
</span><span class='line'>      <span class="n">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">rest</span> <span class="o">=</span> <span class="n">candidates</span><span class="p">[(</span><span class="n">p</span><span class="o">-</span><span class="mi">2</span><span class="p">):][</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">rest</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="ow">not</span> <span class="n">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
</span><span class='line'>      <span class="n">done</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">candidates</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>For those interested in more curious facts about prime numbers a brilliant talk is given by the great Terrence Tao. It&rsquo;s a bit lengthy but <a href="http://www.youtube.com/watch?v=PtsrAw1LR3E">well worth your time.</a></p>
]]></content>
  </entry>
  
</feed>
